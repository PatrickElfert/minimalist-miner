// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, infiniteQueryOptions, type InfiniteData, type UseMutationOptions } from '@tanstack/react-query';
import type { AppControllerGetTokenizedSubtitlesData, AppControllerGetTokenizedSubtitleData, AppControllerGetTokenizedSubtitleError, AppControllerGetTokenizedSubtitleResponse, AppControllerGetSubtitlesData } from '../types.gen';
import { client, appControllerGetTokenizedSubtitles, appControllerGetTokenizedSubtitle, appControllerGetSubtitles } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const appControllerGetTokenizedSubtitlesQueryKey = (options: Options<AppControllerGetTokenizedSubtitlesData>) => [
    createQueryKey("appControllerGetTokenizedSubtitles", options)
];

export const appControllerGetTokenizedSubtitlesOptions = (options: Options<AppControllerGetTokenizedSubtitlesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await appControllerGetTokenizedSubtitles({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: appControllerGetTokenizedSubtitlesQueryKey(options)
}); };

export const appControllerGetTokenizedSubtitleQueryKey = (options: Options<AppControllerGetTokenizedSubtitleData>) => [
    createQueryKey("appControllerGetTokenizedSubtitle", options)
];

export const appControllerGetTokenizedSubtitleOptions = (options: Options<AppControllerGetTokenizedSubtitleData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await appControllerGetTokenizedSubtitle({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: appControllerGetTokenizedSubtitleQueryKey(options),
}); };

export const appControllerGetTokenizedSubtitleInfiniteQueryKey = (options: Options<AppControllerGetTokenizedSubtitleData>): QueryKey<Options<AppControllerGetTokenizedSubtitleData>> => [
    createQueryKey("appControllerGetTokenizedSubtitle", options, true)
];

export const appControllerGetTokenizedSubtitleInfiniteOptions = (options: Options<AppControllerGetTokenizedSubtitleData>) => { return infiniteQueryOptions<AppControllerGetTokenizedSubtitleResponse, AppControllerGetTokenizedSubtitleError, InfiniteData<AppControllerGetTokenizedSubtitleResponse>, QueryKey<Options<AppControllerGetTokenizedSubtitleData>>, number | Pick<QueryKey<Options<AppControllerGetTokenizedSubtitleData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<AppControllerGetTokenizedSubtitleData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            body: {
                start: pageParam
            }
        };
        const { data } = await appControllerGetTokenizedSubtitle({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: appControllerGetTokenizedSubtitleInfiniteQueryKey(options)
}); };

export const appControllerGetTokenizedSubtitleMutation = () => { const mutationOptions: UseMutationOptions<AppControllerGetTokenizedSubtitleResponse, AppControllerGetTokenizedSubtitleError, Options<AppControllerGetTokenizedSubtitleData>> = {
    mutationFn: async (options) => {
        const { data } = await appControllerGetTokenizedSubtitle({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const appControllerGetSubtitlesQueryKey = (options: Options<AppControllerGetSubtitlesData>) => [
    createQueryKey("appControllerGetSubtitles", options)
];

export const appControllerGetSubtitlesOptions = (options: Options<AppControllerGetSubtitlesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await appControllerGetSubtitles({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: appControllerGetSubtitlesQueryKey(options)
}); };
