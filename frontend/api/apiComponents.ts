/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import {useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type AppControllerGetTokenizedSubtitlesPathParams = {
  id: string;
};

export type AppControllerGetTokenizedSubtitlesError =
  Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetTokenizedSubtitlesResponse =
  Schemas.TokenizedSubtitleResponseDto[];

export type AppControllerGetTokenizedSubtitlesVariables = {
  pathParams: AppControllerGetTokenizedSubtitlesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchAppControllerGetTokenizedSubtitles = (
  variables: AppControllerGetTokenizedSubtitlesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    AppControllerGetTokenizedSubtitlesResponse,
    AppControllerGetTokenizedSubtitlesError,
    undefined,
    {},
    {},
    AppControllerGetTokenizedSubtitlesPathParams
  >({ url: "/subtitleToken/{id}", method: "get", ...variables, signal });

export const useAppControllerGetTokenizedSubtitles = <
  TData = AppControllerGetTokenizedSubtitlesResponse,
>(
  variables: AppControllerGetTokenizedSubtitlesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppControllerGetTokenizedSubtitlesResponse,
      AppControllerGetTokenizedSubtitlesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    AppControllerGetTokenizedSubtitlesResponse,
    AppControllerGetTokenizedSubtitlesError,
    TData
  >({
      queryKey: queryKeyFn({
      path: "/subtitleToken/{id}",
      operationId: "appControllerGetTokenizedSubtitles",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAppControllerGetTokenizedSubtitles(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions
  });
};

export type AppControllerGetTokenizedSubtitleQueryParams = {
  text: string;
};

export type AppControllerGetTokenizedSubtitleError =
  Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetTokenizedSubtitleVariables = {
  queryParams: AppControllerGetTokenizedSubtitleQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchAppControllerGetTokenizedSubtitle = (
  variables: AppControllerGetTokenizedSubtitleVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TokenizedSubtitleResponseDto,
    AppControllerGetTokenizedSubtitleError,
    undefined,
    {},
    AppControllerGetTokenizedSubtitleQueryParams,
    {}
  >({ url: "/subtitleToken", method: "get", ...variables, signal });

export const useAppControllerGetTokenizedSubtitle = <
  TData = Schemas.TokenizedSubtitleResponseDto,
>(
  variables: AppControllerGetTokenizedSubtitleVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TokenizedSubtitleResponseDto,
      AppControllerGetTokenizedSubtitleError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.TokenizedSubtitleResponseDto,
    AppControllerGetTokenizedSubtitleError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/subtitleToken",
      operationId: "appControllerGetTokenizedSubtitle",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAppControllerGetTokenizedSubtitle(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AppControllerGetSubtitlesPathParams = {
  id: string;
};

export type AppControllerGetSubtitlesError = Fetcher.ErrorWrapper<undefined>;

export type AppControllerGetSubtitlesResponse = Schemas.SubtitleResponseDto[];

export type AppControllerGetSubtitlesVariables = {
  pathParams: AppControllerGetSubtitlesPathParams;
} & ApiContext["fetcherOptions"];

export const fetchAppControllerGetSubtitles = (
  variables: AppControllerGetSubtitlesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    AppControllerGetSubtitlesResponse,
    AppControllerGetSubtitlesError,
    undefined,
    {},
    {},
    AppControllerGetSubtitlesPathParams
  >({ url: "/subtitles/{id}", method: "get", ...variables, signal });

export const useAppControllerGetSubtitles = <
  TData = AppControllerGetSubtitlesResponse,
>(
  variables: AppControllerGetSubtitlesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      AppControllerGetSubtitlesResponse,
      AppControllerGetSubtitlesError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    AppControllerGetSubtitlesResponse,
    AppControllerGetSubtitlesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/subtitles/{id}",
      operationId: "appControllerGetSubtitles",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchAppControllerGetSubtitles(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/subtitleToken/{id}";
      operationId: "appControllerGetTokenizedSubtitles";
      variables: AppControllerGetTokenizedSubtitlesVariables;
    }
  | {
      path: "/subtitleToken";
      operationId: "appControllerGetTokenizedSubtitle";
      variables: AppControllerGetTokenizedSubtitleVariables;
    }
  | {
      path: "/subtitles/{id}";
      operationId: "appControllerGetSubtitles";
      variables: AppControllerGetSubtitlesVariables;
    };
